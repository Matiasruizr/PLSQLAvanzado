SET SERVEROUTPUT ON;


CREATE OR REPLACE PACKAGE PKG_CUENTAS_CONSOLIDADAS AS
    PROCEDURE PS_NORMALIZA_FACTURAS(V_MES IN NUMBER, V_ANIO IN NUMBER);
    FUNCTION IVA_MES(V_MES IN NUMBER, V_ANIO IN NUMBER) RETURN IVA;
END PKG_CUENTAS_CONSOLIDADAS;
/


CREATE OR REPLACE PACKAGE BODY PKG_CUENTAS_CONSOLIDADAS AS
    -- C)
    V_PORC_IVA NUMBER := 19;
BEGIN
    -- D)
   FUNCTION 
        CALCULO_NETO(V_NUM_FACTURA IN NUMBER,V_MES IN NUMBER, V_ANIO IN NUMBER) RETURN NUMBER IS
        CURSOR C_FACTURAS IS SELECT * FROM FACTURA 
                            JOIN DETALLE_FACTURA ON FACTURA.NUM_FACTURA = DETALLE_FACTURA.NUM_FACTURA
                            JOIN PRODUCTO ON DETALLE_FACTURA.CODIGO_PROD = PRODUCTO.CODIGO_PROD
                            WHERE to_char(FECHA, 'MM') = V_MES
                            AND to_char(FECHA, 'YY') = V_ANIO
                            AND FACTURA.NUM_FACTURA = V_NUM_FACTURA;
       V_SUBTOTAL NUMBER := 0;    
       V_DESCUENTO NUMBER := 0;
    BEGIN
        FOR F IN C_FACTURAS LOOP
             V_SUBTOTAL := V_SUBTOTAL + (F.PRECIO * F.CANTIDAD);  
             V_DESCUENTO := F.DESCUENTO;
        END LOOP; 
             V_SUBTOTAL := V_SUBTOTAL- (V_SUBTOTAL *(V_DESCUENTO/100)); 
         RETURN V_SUBTOTAL;
    END CALCULO_NETO;
      
 
    -- E)
    CREATE OR REPLACE FUNCTION
        CALCULO_IVA(V_SUBTOTAL IN NUMBER) RETURN NUMBER IS
        V_IVA NUMBER := 0;
    BEGIN
        V_IVA := V_SUBTOTAL * (V_PORC_IVA / 100);
        RETURN V_IVA;
    END CALCULO_IVA;
    
    -- F)
    FUNCTION CALCULO_TOTAL(V_SUBTOTAL IS NUMBER) RETURN NUMBER IS
      V_TOTAL NUMBER := 0;
      V_IVA NUMBER := FN_CALCULO_IVA;
    BEGIN
      V_TOTAL := V_SUBTOTAL + CALCULO_IVA;
      RETURN V_TOTAL
    END CALCULO_TOTAL;
    
END;
/


-- 2.1
CREATE SEQUENCE SQ_ERROR_LOG START WITH 1 ;

CREATE OR REPLACE TRIGGER TRG_AUTOMATIZA_FACTURA
BEFORE INSERT ON DETALLE_FACTURA
FOR EACH ROW
DECLARE
MENSAJE VARCHAR2(150);
BEGIN
IF INSERTING THEN
UPDATE FACTURA SET SUBTOTAL = SUBTOTAL+:NEW.SUBTOTAL;
END IF;
exception
when others then 
MENSAJE := sqlerrm;
INSERT INTO LOG_ERROR VALUES(SQ_ERROR_LOG.NEXTVAL,MENSAJE,SYSDATE,USER,'DETALLE_FACTURA');
END TRG_AUTOMATIZA_FACTURA;
/

CREATE SEQUENCE SQ_ERRORES_TABLAS START WITH 1;

CREATE TABLE ERROR_TABLAS(
ID_ERROR NUMBER PRIMARY KEY,
FECHA DATE NOT NULL,
ERROR_TABLA VARCHAR2(150) NOT NULL,
USER_ERROR VARCHAR2(30) NOT NULL
);


-- 2.2)

CREATE OR REPLACE TRIGGER TRG_PROTEGER_TABLAS
BEFORE DROP ON PRUEBA.SCHEMA
DECLARE 
MENSAJE VARCHAR2(150);
BEGIN
 RAISE_APPLICATION_ERROR(-20001,'NO SE PUEDE BORRAR LA TABLA SELECCIONADA');
 exception
when OTHERS then
MENSAJE := sqlerrm;
INSERT INTO ERROR_TABLAS VALUES(SQ_ERRORES_TABLAS.NEXTVAL,SYSDATE,MENSAJE,USER);
 
 END TRG_PROTEGER_TABLAS;
 /



CREATE OR REPLACE PROCEDURE PS_NORMALIZA_FACTURAS(V_MES IN NUMBER, V_ANIO IN NUMBER) IS
    l_mensaje VARCHAR2(100) := 'Â¡Hola Mundo! '||V_MES||' '||V_ANIO;
BEGIN
    DBMS_OUTPUT.put_line(l_mensaje);
    
    CALCULO_IVA, CALCULO_NETO y CALCULO_TOTAL.
END PS_NORMALIZA_FACTURAS;
/
